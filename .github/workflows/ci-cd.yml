name: 🚀 Infrastructure Automation CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  TERRAFORM_VERSION: 1.12.2
  ANSIBLE_VERSION: 8.0.0

jobs:
  validate:
    name: 🔍 Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: 🔍 Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: ./terraform
      
    - name: 🔍 Terraform Validation
      run: |
        terraform init -backend=false
        terraform validate
      working-directory: ./terraform
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 🔧 Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible==${{ env.ANSIBLE_VERSION }}
        pip install kubernetes
        
    - name: 🔍 Ansible Syntax Check
      run: |
        ansible-playbook --syntax-check playbooks/deploy-microservices.yml
        ansible-playbook --syntax-check playbooks/deploy-by-tier.yml
      working-directory: ./ansible
      
    - name: 🔍 PowerShell Syntax Check
      shell: pwsh
      run: |
        Get-ChildItem -Path ./ansible -Filter "*.ps1" | ForEach-Object {
          Write-Host "Checking $($_.Name)..."
          $null = [System.Management.Automation.PSParser]::Tokenize((Get-Content $_.FullName -Raw), [ref]$null)
        }

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: 🚀 Deploy to Dev
      run: |
        echo "🚀 Déploiement en développement"
        echo "Environment: Development"
        echo "Branch: ${{ github.ref }}"
        # Ici, ajouter les commandes de déploiement spécifiques

  deploy-prod:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: 🌟 Deploy to Production
      run: |
        echo "🌟 Déploiement en production"
        echo "Environment: Production"
        echo "Branch: ${{ github.ref }}"
        # Ici, ajouter les commandes de déploiement spécifiques
        
    - name: 📋 Create Release
      if: success()
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          🚀 Déploiement automatique
          - Infrastructure Terraform validée
          - Microservices Ansible déployés
          - Tests de sécurité passés
        draft: false
        prerelease: false
