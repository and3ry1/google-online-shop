# Script pour am√©liorer la r√©silience des microservices

param(
    [string]$Action = "help",
    [int]$Replicas = 3
)

function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Green
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Cyan
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Scale-CriticalServices {
    param([int]$Replicas = 3)
    
    Write-Info "üõ°Ô∏è Am√©lioration de la r√©silience avec $Replicas r√©pliques par service"
    
    # Services critiques qui n√©cessitent haute disponibilit√©
    $criticalServices = @(
        "frontend",
        "cartservice", 
        "productcatalogservice",
        "currencyservice",
        "checkoutservice",
        "paymentservice"
    )
    
    foreach ($service in $criticalServices) {
        Write-Info "üìà Mise √† l'√©chelle de $service vers $Replicas r√©pliques..."
        try {
            kubectl scale deployment $service --replicas=$Replicas
            if ($LASTEXITCODE -eq 0) {
                Write-Success "‚úÖ $service mis √† l'√©chelle avec succ√®s"
            } else {
                Write-Warning "‚ùå Erreur lors de la mise √† l'√©chelle de $service"
            }
        } catch {
            Write-Warning "‚ùå Exception lors de la mise √† l'√©chelle de $service : $_"
        }
    }
    
    # Services moins critiques - 2 r√©pliques
    $standardServices = @(
        "adservice",
        "emailservice", 
        "recommendationservice",
        "shippingservice"
    )
    
    foreach ($service in $standardServices) {
        Write-Info "üìä Mise √† l'√©chelle de $service vers 2 r√©pliques..."
        try {
            kubectl scale deployment $service --replicas=2
            if ($LASTEXITCODE -eq 0) {
                Write-Success "‚úÖ $service mis √† l'√©chelle avec succ√®s"
            }
        } catch {
            Write-Warning "‚ùå Exception lors de la mise √† l'√©chelle de $service : $_"
        }
    }
    
    # Redis reste √† 1 r√©plique (stateful)
    Write-Info "üóÑÔ∏è Redis-cart maintenu √† 1 r√©plique (base de donn√©es)"
}

function Add-HealthChecks {
    Write-Info "üè• Configuration des contr√¥les de sant√© avanc√©s..."
    
    # Exemple pour le frontend
    $frontendPatch = @'
{
  "spec": {
    "template": {
      "spec": {
        "containers": [
          {
            "name": "server",
            "livenessProbe": {
              "httpGet": {
                "path": "/_healthz",
                "port": 8080
              },
              "initialDelaySeconds": 10,
              "periodSeconds": 10,
              "timeoutSeconds": 5,
              "failureThreshold": 3
            },
            "readinessProbe": {
              "httpGet": {
                "path": "/_healthz",
                "port": 8080
              },
              "initialDelaySeconds": 5,
              "periodSeconds": 5,
              "timeoutSeconds": 3,
              "failureThreshold": 2
            }
          }
        ]
      }
    }
  }
}
'@
    
    try {
        $frontendPatch | kubectl patch deployment frontend --patch-file=/dev/stdin
        Write-Success "‚úÖ Health checks ajout√©s au frontend"
    } catch {
        Write-Warning "‚ö†Ô∏è Health checks non appliqu√©s (peut n√©cessiter des ajustements)"
    }
}

function Test-Resilience {
    Write-Info "üß™ TEST DE R√âSILIENCE"
    Write-Info "====================="
    
    # 1. Tester la panne d'un service critique
    Write-Info "1Ô∏è‚É£ Test de panne du cartservice..."
    $cartPod = kubectl get pods -l app=cartservice -o jsonpath='{.items[0].metadata.name}'
    
    Write-Info "üî• Simulation de panne : suppression du pod $cartPod"
    kubectl delete pod $cartPod
    
    # 2. V√©rifier que le site reste accessible
    Write-Info "2Ô∏è‚É£ V√©rification de l'accessibilit√© du site..."
    Start-Sleep -Seconds 2
    
    for ($i = 1; $i -le 5; $i++) {
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:8080" -TimeoutSec 5 -UseBasicParsing
            if ($response.StatusCode -eq 200) {
                Write-Success "‚úÖ Tentative $i : Site accessible (HTTP $($response.StatusCode))"
            }
        } catch {
            Write-Warning "‚ùå Tentative $i : Site non accessible"
        }
        Start-Sleep -Seconds 2
    }
    
    # 3. V√©rifier la r√©cup√©ration automatique
    Write-Info "3Ô∏è‚É£ V√©rification de la r√©cup√©ration automatique..."
    Start-Sleep -Seconds 10
    
    $newPods = kubectl get pods -l app=cartservice --field-selector=status.phase=Running
    if ($newPods) {
        Write-Success "‚úÖ Cartservice r√©cup√©r√© automatiquement"
        kubectl get pods -l app=cartservice
    } else {
        Write-Warning "‚ùå Probl√®me de r√©cup√©ration du cartservice"
    }
}

function Show-ResilienceStatus {
    Write-Info "üìä √âTAT DE LA R√âSILIENCE"
    Write-Info "========================"
    
    # Nombre de r√©pliques par service
    Write-Host "`nüî¢ R√©pliques par service :" -ForegroundColor White
    kubectl get deployments -o custom-columns="SERVICE:.metadata.name,READY:.status.readyReplicas,DESIRED:.spec.replicas,UP-TO-DATE:.status.updatedReplicas"
    
    # Services avec une seule r√©plique (risque)
    Write-Host "`n‚ö†Ô∏è Services √† risque (1 seule r√©plique) :" -ForegroundColor Yellow
    $singleReplicas = kubectl get deployments -o json | ConvertFrom-Json | Select-Object -ExpandProperty items | Where-Object { $_.spec.replicas -eq 1 }
    if ($singleReplicas) {
        $singleReplicas | ForEach-Object { Write-Host "   - $($_.metadata.name)" -ForegroundColor Red }
    } else {
        Write-Host "   Aucun (Excellent !)" -ForegroundColor Green
    }
    
    # Pods en cours d'ex√©cution
    Write-Host "`nüü¢ Pods en cours d'ex√©cution :" -ForegroundColor White
    $runningPods = kubectl get pods --field-selector=status.phase=Running --no-headers | Measure-Object
    $totalPods = kubectl get pods --no-headers | Measure-Object
    Write-Host "   $($runningPods.Count)/$($totalPods.Count) pods op√©rationnels" -ForegroundColor Green
}

function Create-ResiliencePlaybook {
    Write-Info "üìù Cr√©ation d'un playbook Ansible pour la r√©silience..."
    
    $resiliencePlaybook = @'
---
- name: Improve Microservices Resilience
  hosts: localhost
  connection: local
  gather_facts: false
  
  vars:
    namespace: default
    critical_services:
      - name: frontend
        replicas: 3
      - name: cartservice
        replicas: 3
      - name: productcatalogservice
        replicas: 3
      - name: currencyservice
        replicas: 3
      - name: checkoutservice
        replicas: 3
      - name: paymentservice
        replicas: 3
    
    standard_services:
      - name: adservice
        replicas: 2
      - name: emailservice
        replicas: 2
      - name: recommendationservice
        replicas: 2
      - name: shippingservice
        replicas: 2
  
  tasks:
    - name: Scale critical services for high availability
      kubernetes.core.k8s_scale:
        api_version: apps/v1
        kind: Deployment
        name: "{{ item.name }}"
        namespace: "{{ namespace }}"
        replicas: "{{ item.replicas }}"
      loop: "{{ critical_services }}"
      
    - name: Scale standard services for resilience
      kubernetes.core.k8s_scale:
        api_version: apps/v1
        kind: Deployment
        name: "{{ item.name }}"
        namespace: "{{ namespace }}"
        replicas: "{{ item.replicas }}"
      loop: "{{ standard_services }}"
      
    - name: Wait for all deployments to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: "{{ item.name }}"
        namespace: "{{ namespace }}"
        wait: true
        wait_condition:
          type: Progressing
          status: "True"
          reason: NewReplicaSetAvailable
        wait_timeout: 300
      loop: "{{ (critical_services + standard_services) | map(attribute='name') | list }}"
'@
    
    $resiliencePlaybook | Out-File -FilePath "playbooks\improve-resilience.yml" -Encoding UTF8
    Write-Success "‚úÖ Playbook de r√©silience cr√©√© : playbooks\improve-resilience.yml"
}

# Logique principale
switch ($Action.ToLower()) {
    "scale" {
        Scale-CriticalServices -Replicas $Replicas
        Show-ResilienceStatus
    }
    "health" {
        Add-HealthChecks
    }
    "test" {
        Test-Resilience
    }
    "status" {
        Show-ResilienceStatus
    }
    "playbook" {
        Create-ResiliencePlaybook
    }
    "full" {
        Write-Info "üöÄ AM√âLIORATION COMPL√àTE DE LA R√âSILIENCE"
        Write-Info "=========================================="
        Scale-CriticalServices -Replicas $Replicas
        Add-HealthChecks
        Create-ResiliencePlaybook
        Show-ResilienceStatus
        Write-Success "üéâ R√©silience am√©lior√©e avec succ√®s !"
    }
    "help" {
        Write-Host @"
üõ°Ô∏è AM√âLIORATEUR DE R√âSILIENCE - MICROSERVICES

Usage: .\Improve-Resilience.ps1 -Action <action> [-Replicas <number>]

Actions:
  scale      Augmenter le nombre de r√©pliques des services critiques
  health     Ajouter des contr√¥les de sant√© avanc√©s
  test       Tester la r√©silience avec simulation de panne
  status     Afficher l'√©tat actuel de la r√©silience
  playbook   Cr√©er un playbook Ansible pour la r√©silience
  full       Am√©lioration compl√®te (recommand√©)
  help       Afficher cette aide

Options:
  -Replicas <n>   Nombre de r√©pliques pour les services critiques (d√©faut: 3)

Exemples:
  .\Improve-Resilience.ps1 -Action full
  .\Improve-Resilience.ps1 -Action scale -Replicas 5
  .\Improve-Resilience.ps1 -Action test

üéØ Pour une am√©lioration compl√®te : -Action full
"@ -ForegroundColor White
    }
    default {
        Write-Warning "Action non reconnue: $Action"
        Write-Host "Utilisez -Action help pour voir les options disponibles" -ForegroundColor Gray
    }
}
