---
# R√®gles d'alerte Prometheus pour monitoring des microservices
# Seuils adapt√©s pour environnement de production

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: monitoring
data:
  microservices.yml: |
    groups:
    - name: microservices.rules
      rules:
      
      # Alerte si un pod est down depuis plus de 5 minutes
      - alert: PodDown
        expr: up == 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Pod {{ $labels.instance }} is down"
          description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 5 minutes."
      
      # Alerte si CPU √©lev√© (> 80%) pendant 5 minutes
      - alert: HighCpuUsage
        expr: (sum(rate(container_cpu_usage_seconds_total[5m])) by (pod) * 100) > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage detected"
          description: "Pod {{ $labels.pod }} CPU usage is above 80% for more than 5 minutes."
      
      # Alerte si m√©moire √©lev√©e (> 90%)
      - alert: HighMemoryUsage
        expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes * 100) > 90
        for: 3m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage detected"
          description: "Pod {{ $labels.pod }} memory usage is above 90% for more than 3 minutes."
      
      # Alerte si trop de restart de pods
      - alert: PodRestartingTooMuch
        expr: increase(kube_pod_container_status_restarts_total[1h]) > 5
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: "Pod is restarting too much"
          description: "Pod {{ $labels.pod }} has restarted more than 5 times in the last hour."
      
      # Alerte service indisponible
      - alert: ServiceDown
        expr: up{job="microservices"} == 0
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "Microservice is down"
          description: "Service {{ $labels.kubernetes_name }} in namespace {{ $labels.kubernetes_namespace }} is down."
      
      # Alerte latence √©lev√©e (> 500ms)
      - alert: HighLatency
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 0.5
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High latency detected"
          description: "95th percentile latency is above 500ms for {{ $labels.job }}."
      
      # Alerte taux d'erreur √©lev√© (> 5%)
      - alert: HighErrorRate
        expr: (rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m])) * 100 > 5
        for: 3m
        labels:
          severity: critical
        annotations:
          summary: "High error rate detected"
          description: "Error rate is above 5% for {{ $labels.job }}."
      
      # Alerte stockage faible
      - alert: LowDiskSpace
        expr: (node_filesystem_avail_bytes / node_filesystem_size_bytes * 100) < 10
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: "Low disk space"
          description: "Disk space is below 10% on {{ $labels.instance }}."
      
      # Alerte si node Kubernetes down
      - alert: NodeDown
        expr: up{job="kubernetes-nodes"} == 0
        for: 3m
        labels:
          severity: critical
        annotations:
          summary: "Kubernetes node is down"
          description: "Kubernetes node {{ $labels.instance }} has been down for more than 3 minutes."
      
      # Alerte si trop de requ√™tes en attente
      - alert: HighRequestQueue
        expr: sum(rate(http_requests_total[5m])) by (job) > 1000
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High request rate"
          description: "Request rate for {{ $labels.job }} is above 1000 req/s for more than 5 minutes."

---
# Configuration AlertManager
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: monitoring
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'localhost:587'
      smtp_from: 'alertmanager@yourcompany.com'
    
    route:
      group_by: ['alertname']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
      routes:
      - match:
          severity: critical
        receiver: 'critical-alerts'
      - match:
          severity: warning
        receiver: 'warning-alerts'
    
    receivers:
    - name: 'web.hook'
      webhook_configs:
      - url: 'http://localhost:5001/webhook'
    
    - name: 'critical-alerts'
      email_configs:
      - to: 'ops-team@yourcompany.com'
        subject: 'üö® CRITIQUE: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }}{{ end }}
          {{ end }}
      slack_configs:
      - api_url: 'YOUR_SLACK_WEBHOOK_URL'
        channel: '#alerts-critical'
        title: 'üö® Alerte Critique'
        text: '{{ .CommonAnnotations.summary }}'
    
    - name: 'warning-alerts'
      email_configs:
      - to: 'dev-team@yourcompany.com'
        subject: '‚ö†Ô∏è WARNING: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          {{ end }}

---
# Deployment AlertManager
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: monitoring
  labels:
    app: alertmanager
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
    spec:
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.25.0
        ports:
        - containerPort: 9093
        args:
          - '--config.file=/etc/alertmanager/alertmanager.yml'
          - '--storage.path=/alertmanager'
          - '--web.external-url=http://localhost:9093'
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 256Mi
        volumeMounts:
        - name: config-volume
          mountPath: /etc/alertmanager
      volumes:
      - name: config-volume
        configMap:
          name: alertmanager-config

---
# Service AlertManager
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: monitoring
  labels:
    app: alertmanager
spec:
  selector:
    app: alertmanager
  type: ClusterIP
  ports:
  - port: 9093
    targetPort: 9093
    name: alertmanager
