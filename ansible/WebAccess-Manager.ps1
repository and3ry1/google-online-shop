# Script de gestion compl√®te de l'acc√®s web pour l'automatisation finale
param(
    [string]$Action = "help",
    [string]$Port = "8080"
)

function Write-Info {
    param([string]$Message)
    Write-Host "[INFO] $Message" -ForegroundColor Green
}

function Write-Success {
    param([string]$Message)
    Write-Host "[SUCCESS] $Message" -ForegroundColor Cyan
}

function Write-Warning {
    param([string]$Message)
    Write-Host "[WARNING] $Message" -ForegroundColor Yellow
}

function Start-WebAccess {
    param([string]$Port = "8080")
    
    Write-Info "üåê D√©marrage de l'acc√®s web sur le port $Port..."
    
    # V√©rifier si le port-forward existe d√©j√†
    $existingProcess = Get-Process | Where-Object { $_.ProcessName -eq "kubectl" -and $_.CommandLine -like "*port-forward*$Port*" } 2>$null
    
    if ($existingProcess) {
        Write-Info "‚úÖ Port-forward d√©j√† actif sur le port $Port"
    } else {
        Write-Info "üöÄ Cr√©ation du port-forward sur le port $Port..."
        
        # Cr√©er le port-forward en arri√®re-plan
        $job = Start-Job -ScriptBlock {
            param($Port)
            kubectl port-forward service/frontend $Port`:80 -n default
        } -ArgumentList $Port
        
        # Attendre que le port-forward soit √©tabli
        Start-Sleep -Seconds 3
        
        # V√©rifier si le port-forward fonctionne
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:$Port" -TimeoutSec 5 -UseBasicParsing
            if ($response.StatusCode -eq 200) {
                Write-Success "‚úÖ Port-forward cr√©√© et fonctionnel sur le port $Port"
                Write-Success "üåç Application accessible sur: http://localhost:$Port"
                return $true
            }
        } catch {
            Write-Warning "‚ö†Ô∏è D√©lai d'attente pour l'√©tablissement du port-forward"
        }
    }
    
    return $false
}

function Test-WebAccess {
    Write-Info "üß™ Test de l'acc√®s web..."
    
    $ports = @("8080", "8081", "9090")
    $accessiblePorts = @()
    
    foreach ($testPort in $ports) {
        try {
            $response = Invoke-WebRequest -Uri "http://localhost:$testPort" -TimeoutSec 3 -UseBasicParsing
            if ($response.StatusCode -eq 200) {
                $accessiblePorts += $testPort
                Write-Success "‚úÖ Port $testPort : ACCESSIBLE"
            }
        } catch {
            Write-Info "‚ùå Port $testPort : Non accessible"
        }
    }
    
    if ($accessiblePorts.Count -gt 0) {
        $primaryPort = $accessiblePorts[0]
        Write-Success "üåç Application accessible sur: http://localhost:$primaryPort"
        return $primaryPort
    } else {
        Write-Warning "‚ùå Aucun port accessible trouv√©"
        return $null
    }
}

function Open-WebBrowser {
    param([string]$Port = "8080")
    
    $url = "http://localhost:$Port"
    Write-Info "üåê Ouverture du navigateur sur: $url"
    
    try {
        Start-Process $url
        Write-Success "‚úÖ Navigateur ouvert avec succ√®s"
    } catch {
        Write-Warning "‚ö†Ô∏è Erreur lors de l'ouverture du navigateur: $_"
        Write-Info "üí° Ouvrez manuellement: $url"
    }
}

function Stop-WebAccess {
    Write-Info "üõë Arr√™t des acc√®s web..."
    
    # Arr√™ter tous les jobs kubectl port-forward
    Get-Job | Where-Object { $_.Command -like "*kubectl*port-forward*" } | Stop-Job -PassThru | Remove-Job
    
    # Tuer les processus kubectl port-forward
    Get-Process | Where-Object { $_.ProcessName -eq "kubectl" } | ForEach-Object {
        try {
            Stop-Process -Id $_.Id -Force
            Write-Info "‚úÖ Processus kubectl arr√™t√©: $($_.Id)"
        } catch {
            Write-Warning "‚ö†Ô∏è Impossible d'arr√™ter le processus: $($_.Id)"
        }
    }
    
    Write-Success "‚úÖ Tous les acc√®s web ont √©t√© arr√™t√©s"
}

function Show-Status {
    Write-Info "üìä √âtat de l'infrastructure et des acc√®s..."
    
    # √âtat des services
    Write-Info "üîß Services Kubernetes:"
    kubectl get services -n default | Select-String "frontend"
    
    # √âtat des pods
    Write-Info "`nüöÄ Pods frontend:"
    kubectl get pods -n default | Select-String "frontend"
    
    # Processus port-forward actifs
    Write-Info "`nüåê Acc√®s web actifs:"
    $jobs = Get-Job | Where-Object { $_.Command -like "*kubectl*port-forward*" }
    if ($jobs) {
        $jobs | ForEach-Object { Write-Host "   Job ID: $($_.Id) - √âtat: $($_.State)" -ForegroundColor Green }
    } else {
        Write-Host "   Aucun port-forward actif" -ForegroundColor Yellow
    }
    
    # Test des ports
    $accessiblePort = Test-WebAccess
    if ($accessiblePort) {
        Write-Success "üéâ Application accessible et pr√™te !"
    }
}

function Complete-Setup {
    Write-Info "üéØ CONFIGURATION COMPL√àTE DE L'ACC√àS WEB"
    Write-Info "=========================================="
    
    # 1. V√©rifier l'√©tat des services
    Write-Info "1Ô∏è‚É£ V√©rification de l'infrastructure..."
    $frontendPod = kubectl get pods -n default | Select-String "frontend.*Running"
    if (-not $frontendPod) {
        Write-Warning "‚ùå Aucun pod frontend en cours d'ex√©cution"
        Write-Info "üí° D√©ployez d'abord avec: .\Deploy-Microservices.ps1 -Action status"
        return $false
    }
    
    # 2. Configurer l'acc√®s web
    Write-Info "2Ô∏è‚É£ Configuration de l'acc√®s web..."
    $success = Start-WebAccess -Port $Port
    
    # 3. Tester l'acc√®s
    Write-Info "3Ô∏è‚É£ Test de l'acc√®s..."
    Start-Sleep -Seconds 2
    $accessiblePort = Test-WebAccess
    
    # 4. Ouvrir le navigateur
    if ($accessiblePort) {
        Write-Info "4Ô∏è‚É£ Ouverture du navigateur..."
        Open-WebBrowser -Port $accessiblePort
        
        Write-Success "üéâ CONFIGURATION TERMIN√âE AVEC SUCC√àS !"
        Write-Info "üìã R√©sum√©:"
        Write-Host "   ‚úÖ Infrastructure: Op√©rationnelle" -ForegroundColor Green
        Write-Host "   ‚úÖ Acc√®s web: http://localhost:$accessiblePort" -ForegroundColor Green
        Write-Host "   ‚úÖ Navigateur: Ouvert automatiquement" -ForegroundColor Green
        
        return $true
    } else {
        Write-Warning "‚ùå √âchec de la configuration de l'acc√®s web"
        return $false
    }
}

# Logique principale
switch ($Action.ToLower()) {
    "start" {
        Start-WebAccess -Port $Port
        Test-WebAccess
    }
    "test" {
        $port = Test-WebAccess
        if ($port) {
            Open-WebBrowser -Port $port
        }
    }
    "open" {
        Open-WebBrowser -Port $Port
    }
    "stop" {
        Stop-WebAccess
    }
    "status" {
        Show-Status
    }
    "setup" {
        Complete-Setup
    }
    "help" {
        Write-Host @"
üåê GESTIONNAIRE D'ACC√àS WEB - ONLINE BOUTIQUE

Usage: .\WebAccess-Manager.ps1 -Action <action> [-Port <port>]

Actions:
  setup     Configuration compl√®te et ouverture automatique
  start     D√©marrer l'acc√®s web sur un port sp√©cifique  
  test      Tester les acc√®s et ouvrir le navigateur
  open      Ouvrir le navigateur sur un port sp√©cifique
  stop      Arr√™ter tous les acc√®s web
  status    Afficher l'√©tat de l'infrastructure et des acc√®s
  help      Afficher cette aide

Options:
  -Port <port>   Port √† utiliser (d√©faut: 8080)

Exemples:
  .\WebAccess-Manager.ps1 -Action setup          # Configuration compl√®te
  .\WebAccess-Manager.ps1 -Action start -Port 9090
  .\WebAccess-Manager.ps1 -Action test
  .\WebAccess-Manager.ps1 -Action status

üéØ Pour une configuration rapide: -Action setup
"@ -ForegroundColor White
    }
    default {
        Write-Warning "Action non reconnue: $Action"
        Write-Host "Utilisez -Action help pour voir les options disponibles" -ForegroundColor Gray
    }
}
