---
# Playbook pour d√©ploiement par tiers (web, business, data)
# filepath: c:\Users\Administrateur\commun\tp final\infrastructure-automation\ansible\playbooks\deploy-by-tier.yml

- name: Deploy Microservices by Tier
  hosts: localhost
  connection: local
  gather_facts: false
  
  vars:
    target_tier: "{{ tier | default('web_tier') }}"
    namespace: "{{ namespace | default('default') }}"
    strategy: "{{ strategy | default('sequential') }}"
    
  tasks:
    - name: Ensure namespace exists
      kubernetes.core.k8s:
        name: "{{ namespace }}"
        api_version: v1
        kind: Namespace
        state: present
    
    - name: Display deployment info
      debug:
        msg: "Deploying {{ target_tier }} with {{ strategy }} strategy"
    
    - name: Deploy services in target tier
      include_tasks: ../tasks/deploy-single-microservice.yml
      vars:
        service_config: "{{ hostvars[item] }}"
      loop: "{{ groups[target_tier] | default([]) }}"
      when: 
        - groups[target_tier] is defined
        - strategy == 'sequential'
    
    - name: Deploy services in parallel (if strategy is parallel)
      include_tasks: ../tasks/deploy-single-microservice.yml
      vars:
        service_config: "{{ hostvars[item] }}"
      loop: "{{ groups[target_tier] | default([]) }}"
      when: 
        - groups[target_tier] is defined
        - strategy == 'parallel'
      async: 300
      poll: 0
      register: parallel_deployments
    
    - name: Wait for parallel deployments to complete
      async_status:
        jid: "{{ item.ansible_job_id }}"
      register: deployment_result
      until: deployment_result.finished
      retries: 30
      delay: 10
      loop: "{{ parallel_deployments.results | default([]) }}"
      when: strategy == 'parallel'
    
    - name: Verify all deployments in tier are ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: "{{ namespace }}"
        label_selectors:
          - "tier={{ target_tier }}"
        wait: true
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300
      register: tier_status
    
    - name: Display tier deployment results
      debug:
        msg: "{{ tier_status.resources | length }} deployments ready in {{ target_tier }}"
